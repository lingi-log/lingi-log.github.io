(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{258:function(t,a,n){"use strict";n.r(a);var _=n(0),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_51번-60번"}},[t._v("51번 ~ 60번")]),t._v(" "),n("h2",{attrs:{id:"_51-n-queens"}},[t._v("51. N-Queens")]),t._v(" "),n("p",[t._v("가로, 세로 N*N 에 Queen의 이동 동선이 겹치지 않게 N개의 Queen을 놓을 수 있는 방법?")]),t._v(" "),n("h3",{attrs:{id:"풀이-아이디어"}},[t._v("풀이 아이디어")]),t._v(" "),n("ul",[n("li",[t._v("Queen은 가로 세로, 대각선 방향으로 이동이 가능하다.")]),t._v(" "),n("li",[t._v("여기서 1줄엔 Queen 하나씩만 놓아야 한다는 조건을 하나 찾을 수 있다.")]),t._v(" "),n("li",[t._v("왼쪽 위 첫번째 줄을 0번쨔로 보면, k 번쨰 줄에 Queen을 놓을 땐 0 ~ k-1번째 줄을 대상으로 동선이 겹치는 Queen이 있는 지 column check, cross line check을 해 준다.")]),t._v(" "),n("li",[t._v("이 과정을 0 ~ n-1 번 까지 반복한다.")])]),t._v(" "),n("h2",{attrs:{id:"_52-n-queens-ii"}},[t._v("52. N-Queens II")]),t._v(" "),n("p",[t._v("51번과 거의 유사한 문제.")]),t._v(" "),n("h2",{attrs:{id:"_53-maximum-subarray"}},[t._v("53. Maximum Subarray")]),t._v(" "),n("p",[t._v("크기 n의 int array nums를 받았을 때, nums의 sub array 중 sub array 인자가 가장 큰 sub array를 찾으면 된다."),n("br"),t._v("\n합의 Maximum 값만 구하면 된다.")]),t._v(" "),n("h3",{attrs:{id:"풀이-아이디어-2"}},[t._v("풀이 아이디어")]),t._v(" "),n("p",[t._v("우리는 Sub array의 startIdx, endIdx를 알 필요 없이 '합'만 구하면 된다.")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("maxSum[i]")]),t._v(" 을 nums[i] 일때 합의 max 값"),n("br"),t._v(" "),n("code",[t._v("prev[i]")]),t._v("를 nums[i] + max(prev[i-1], 0) 라 했을 때(초기값 : nums[0])\n"),n("ul",[n("li",[t._v("maxSum[i] = max(maxSum[i-1], nums[i] + max(prev[i-1], 0))")])])])]),t._v(" "),n("p",[t._v("이라고 할 수 있다."),n("br"),t._v("\nmaxSum[0] = nums[0], prev[0] = nums[0]이라 하고, 1부터 nums.length-1 까지 루프를 돌며 maxSum[i]를 찾으면 된다.")]),t._v(" "),n("h2",{attrs:{id:"_54-spiral-matrix"}},[t._v("54. Spiral Matrix")]),t._v(" "),n("p",[t._v("m * n 배열 matrix가 주어졌을 때, matrix[0][0]부터 시계방향으로 돌며 배열의 값을 읽어 1차원 배열에 담아 출력."),n("br"),t._v("\n예를 들어 이렇게.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Input:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\n")])])]),n("h3",{attrs:{id:"풀이-아이디어-3"}},[t._v("풀이 아이디어")]),t._v(" "),n("p",[t._v("단순하게 (0,0) 부터 (0, 1), (0, 2) ... (0, n-1), (1, n-1), (2, n-1) ... (m-1, n-1) ... 이렇게 읽어주면 된다.")]),t._v(" "),n("h2",{attrs:{id:"_55-jump-game"}},[t._v("55. Jump Game")]),t._v(" "),n("p",[t._v("양수 integer 배열 nums가 주어진다. nums[i]의 의미는 i번 인덱스 에서 최대 "),n("code",[t._v("i+nums[i]")]),t._v("번 인덱스 까지 jump 가능하다는 의미 이다."),n("br"),t._v("\n이 때, 0번 인덱스 부터 출발해서 nums 배열의 마지막 인덱스까지 이동 가능한지 여부를 체크해서 반환해주면 된다.")]),t._v(" "),n("h3",{attrs:{id:"풀이-아이디어-4"}},[t._v("풀이 아이디어")]),t._v(" "),n("h2",{attrs:{id:"_56-merge-intervals"}},[t._v("56. Merge Intervals")]),t._v(" "),n("h2",{attrs:{id:"_57-insert-interval"}},[t._v("57. Insert Interval")]),t._v(" "),n("h2",{attrs:{id:"_58-length-of-last-word"}},[t._v("58. Length of Last Word")]),t._v(" "),n("h2",{attrs:{id:"_59-spiral-matrix-ii"}},[t._v("59. Spiral Matrix II")]),t._v(" "),n("h2",{attrs:{id:"_60-permutation-sequence"}},[t._v("60. Permutation Sequence")])])}),[],!1,null,null,null);a.default=e.exports}}]);