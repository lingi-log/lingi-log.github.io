(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{275:function(t,_,v){"use strict";v.r(_);var l=v(0),e=Object(l.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"인터페이스는-타입을-정의하는-용도로만-사용하라"}},[t._v("인터페이스는 타입을 정의하는 용도로만 사용하라")]),t._v(" "),v("p",[t._v("인터페이스는 자신을 구현한 클래스의 인스턴스를 참조할 수 있는 타입 역할을 한다. 달리 말해 클래스가 어떤 인터페이스를 구현한다는 것은 자신의 인스턴스로 무엇을 할 수 있는지를 클라이언트에 얘기해주는 것이다. 인터페이스는 오직 이 용도로 사용해야 한다.")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("상수 인터페이스 안티패턴은 인터페이스를 잘못 사용한 예다.")]),t._v(" "),v("ul",[v("li",[t._v("이것은 내부 구현을 클래스의 API로 노출하는 행위다.")]),t._v(" "),v("li",[t._v("이러한 방식은 사용자에게 혼란을 줄 수 있으며, 더 심하게는 클라이언트 코드가 이 상수들에 종속되게 됨.")]),t._v(" "),v("li",[t._v("java.io.ObjectStreamConstants 등 자바 플랫폼 라이브러리에도 상수 인터페이스가 몇개 있으나, 인터페이스를 잘못 활용한 예이니 따라 해서는 안 된다.")])])]),t._v(" "),v("li",[v("p",[t._v("예외로,,,")])]),t._v(" "),v("li",[v("p",[t._v("특정 클래스나 인터페이스와 강하게 연관된 상수라면 그 클래스나 인터페이스 자체에 추가해야 한다.")]),t._v(" "),v("ul",[v("li",[t._v("Integer, Double에 선언된 MIN_VALUE, MAX_VALUE 상수가 이런 예다.")])])]),t._v(" "),v("li",[v("p",[t._v("열거타입으로 나타내기 적합한 상수라면 열거타입으로 만들어 공개하면 된다.")])]),t._v(" "),v("li",[v("p",[t._v("그것도 아니라면 인터페이스화 할 수 없는 유틸리티 클래스에 담아서 공개하자.")])])]),t._v(" "),v("p",[t._v("** 인터페이스는 타입 정의하는 용도로만 사용해야 한다. 상수 공개용 수단으로 사용하지 말자.")])])}),[],!1,null,null,null);_.default=e.exports}}]);