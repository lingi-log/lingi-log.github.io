(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{212:function(_,v,t){"use strict";t.r(v);var d=t(0),r=Object(d.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"성능-최적화"}},[_._v("성능 최적화")]),_._v(" "),t("blockquote",[t("h3",{attrs:{id:"테스트-서버-스펙"}},[_._v("테스트 서버 스펙")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th"),_._v(" "),t("th")])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("cpu")]),_._v(" "),t("td",[_._v("12코어(6코어 * 2)")])]),_._v(" "),t("tr",[t("td",[_._v("메모리")]),_._v(" "),t("td",[_._v("32GB")])]),_._v(" "),t("tr",[t("td",[_._v("서버")]),_._v(" "),t("td",[_._v("2대")])])])])]),_._v(" "),t("h2",{attrs:{id:"테스트-요소"}},[_._v("테스트 요소")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("인덱싱 성능")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th"),_._v(" "),t("th")])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("테스트 목적")]),_._v(" "),t("td",[_._v("실시간으로 들어오는 대량의 데이터를 밀리거나 누락되지 않고 처리할 수 있는 지 확인"),t("br"),_._v("현 서버 기준 최적의 shard개수, 인댁스 매핑 찾기")])]),_._v(" "),t("tr",[t("td",[_._v("통과 기준")]),_._v(" "),t("td",[_._v("이상(에러 등) 없이 document가 인덱싱 되는 지 테스트"),t("br"),_._v("집어넣은 데이터가 누락 없이 인덱싱 되었는 지 RDB와 비교")])]),_._v(" "),t("tr",[t("td",[_._v("테스트 계획")]),_._v(" "),t("td",[_._v("1. Document 생성 방법: RDB -> (Logstash) -> ES"),t("br"),_._v("2. Document 개수 : 3000개/분 * 1시간"),t("br"),_._v("3. 테스트 통과 시 측정 시간을 하루, 일주일로 늘려가며 테스트 한 후, 최종 테스트 결과 판별")])])])])]),_._v(" "),t("li",[t("p",[_._v("쿼리 속도")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th"),_._v(" "),t("th")])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("테스트 목적")]),_._v(" "),t("td",[_._v("인덱싱된 데이터로 RDB와 동일한 결과를 뽑아내는 데 어느 정도의 시간이 걸리는 지 측정"),t("br"),_._v("현 서버 기준 최적의 shard개수, 인댁스 매핑 찾기")])]),_._v(" "),t("tr",[t("td",[_._v("통과 기준")]),_._v(" "),t("td",[_._v("RDB보다 빠른 시간"),t("br"),_._v("쿼리 처리 속도 1초 이내 목표")])]),_._v(" "),t("tr",[t("td",[_._v("테스트 계획")]),_._v(" "),t("td",[_._v("Document 생성 방법 : 기존 사용하고 있는 데이터들 logstash 사용하여 ES로 집어넣기"),t("br"),_._v("RDB의 쿼리와 같은 결과물을 얻는 ES 쿼리를 작성 후 속도를 측정해 본다.")])])])])])]),_._v(" "),t("h2",{attrs:{id:"성능-테스트"}},[_._v("성능 테스트")]),_._v(" "),t("h3",{attrs:{id:"_1-인덱싱-성능"}},[_._v("1. 인덱싱 성능")]),_._v(" "),t("h4",{attrs:{id:"인덱싱-성능-테스트-1차"}},[_._v("인덱싱 성능 테스트 1차")]),_._v(" "),t("h5",{attrs:{id:"준비"}},[_._v("준비")]),_._v(" "),t("ol",[t("li",[_._v("mariadb -> elasticsearch 데이터 동기화\n"),t("ul",[t("li",[_._v("logstash 10개 pipeline 설정")]),_._v(" "),t("li",[_._v("scheduler 1분")]),_._v(" "),t("li",[_._v("pipeline 하나당 1분에 300개, 총 1분에 3000개 데이터 들어감.")])])])]),_._v(" "),t("h5",{attrs:{id:"결과"}},[_._v("결과")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("retrying failed action with response code: 429")]),_._v("에러 발생.\n"),t("ul",[t("li",[_._v("인덱싱 성능 향상을 위한 튜닝 필요")])])])]),_._v(" "),t("blockquote",[t("h4",{attrs:{id:"인덱싱-성능-튜닝-방법"}},[_._v("인덱싱 성능 튜닝 방법.")]),_._v(" "),t("ol",[t("li",[_._v("_all 필드 비활성화\n"),t("ul",[t("li",[_._v("특별한 목적에 의해 ES가 생성하는 필드.")])])]),_._v(" "),t("li",[_._v("static index 사용해보기.\n"),t("ul",[t("li",[_._v("text 필드가 keyword 필드로 많이 바뀔 수록 그 차이는 더 크게 날 것임.")])]),_._v(" "),t("ol",[t("li",[_._v("text -> keyword, log -> integer로 변경")])])]),_._v(" "),t("li",[_._v("refresh_interval\n"),t("ul",[t("li",[_._v("es는 새로운 문서가 인입되었을 때 인덱싱을 하고 그 결과를 세그먼트 단위로 저장함.")]),_._v(" "),t("li",[_._v("이 세그먼트들은 백그라운드에서 머지되어 점점 큰 세그먼트가 되어가는데, es가 이 작업을 하는 것을 refresh라고 부름.")]),_._v(" "),t("li",[_._v("이 세그먼트 생성 주기는 default 1초. (near realtime search engine 컨셉)")]),_._v(" "),t("li",[_._v("이 작업은 성능에 영향을 준다. 1초에서 더 늘리면 더 많은 양의 데이터를 인덱싱 할 수 있음.")])])]),_._v(" "),t("li",[_._v("primary shard 개수\n"),t("ul",[t("li",[_._v("모든 인덱싱은 primary shard에서 일어남. 따라서, primary shard의 개수에 따라 인덱싱 성능이 달라질 수 있음.")])])]),_._v(" "),t("li",[_._v("필드 개수 줄이기\n"),t("ul",[t("li",[_._v("insp_type_value 부분을 object => array 형식으로 변경하여 필드 개수 줄임.(약 1000개 정도?)")]),_._v(" "),t("li",[t("code",[_._v("mapping_nested_nested_0812.json")])])])])])]),_._v(" "),t("h4",{attrs:{id:"인덱싱-성능-테스트-2차"}},[_._v("인덱싱 성능 테스트 2차")]),_._v(" "),t("h5",{attrs:{id:"준비-2"}},[_._v("준비")]),_._v(" "),t("ul",[t("li",[_._v("_all 필드 비활성화")]),_._v(" "),t("li",[_._v("static index 사용\n"),t("ul",[t("li",[_._v("데이터 집어넣기 전에 매핑")]),_._v(" "),t("li",[_._v("문자열 형식 필드는 keyword로, 숫자 필드는 integer로 변경")])])]),_._v(" "),t("li",[_._v("refresh interval은 세팅 안함..")]),_._v(" "),t("li",[_._v("primary shard 변경해가며 속도 비교")]),_._v(" "),t("li",[_._v("데이터 형식 보고 필드 개수 줄임\n"),t("ul",[t("li",[_._v("필요하지 않은 필드 제거, object array는 nested 형식으로 변경. 1500개 -> 60개로 축소")])])])]),_._v(" "),t("h5",{attrs:{id:"테스트"}},[_._v("테스트")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("shard 별 indexing 시간(mapping은 기존)")]),_._v(" "),t("blockquote",[t("p",[_._v("all 필드 disable"),t("br"),_._v("\nmapping 직접 정의해 keyword 필드, integer로 설정.")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("-")]),_._v(" "),t("th",[_._v("2 s, 1 r")]),_._v(" "),t("th",[_._v("4 s, 1 r")]),_._v(" "),t("th",[_._v("6 s, 1 r")]),_._v(" "),t("th",[_._v("8 s, 1 r")]),_._v(" "),t("th",[_._v("10 s, 1 r")]),_._v(" "),t("th",[_._v("12 s, 1 r")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("5000개")]),_._v(" "),t("td",[_._v("2234"),t("br"),_._v("2190")]),_._v(" "),t("td",[_._v("1398"),t("br"),_._v("1506")]),_._v(" "),t("td",[_._v("2080"),t("br"),_._v("2760")]),_._v(" "),t("td",[_._v("3059"),t("br"),_._v("11176")]),_._v(" "),t("td",[_._v("6968"),t("br"),_._v("8332")]),_._v(" "),t("td",[_._v("8294"),t("br"),_._v("14363")])]),_._v(" "),t("tr",[t("td",[_._v("10000개")]),_._v(" "),t("td",[_._v("4236"),t("br"),_._v("4153")]),_._v(" "),t("td",[_._v("4776"),t("br"),_._v("2539")]),_._v(" "),t("td",[_._v("6479"),t("br"),_._v("8874")]),_._v(" "),t("td",[_._v("7312"),t("br"),_._v("6790")]),_._v(" "),t("td",[_._v("13072"),t("br"),_._v("11108")]),_._v(" "),t("td",[_._v("14600"),t("br"),_._v("17498")])])])]),_._v(" "),t("p",[_._v("=> 4shard 1 replica가 가장 우수함.")])]),_._v(" "),t("li",[t("p",[_._v("mapping 변경 indexing 시간")]),_._v(" "),t("blockquote",[t("p",[_._v("all 필드 disable"),t("br"),_._v("\nmapping 직접 정의해 keyword 필드, integer로 설정."),t("br"),_._v("\nmapping 구조 변경으로 필드 1299개 줄임(1351 -> 52)")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("-")]),_._v(" "),t("th",[_._v("2 s, 1 r")]),_._v(" "),t("th",[_._v("4 s, 1 r")]),_._v(" "),t("th",[_._v("6 s, 1 r")]),_._v(" "),t("th",[_._v("8 s, 1 r")]),_._v(" "),t("th",[_._v("10 s, 1 r")]),_._v(" "),t("th",[_._v("12 s, 1 r")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("5000개")]),_._v(" "),t("td"),_._v(" "),t("td",[_._v("900"),t("br"),_._v("882")]),_._v(" "),t("td"),_._v(" "),t("td"),_._v(" "),t("td"),_._v(" "),t("td")]),_._v(" "),t("tr",[t("td",[_._v("10000개")]),_._v(" "),t("td"),_._v(" "),t("td",[_._v("1796"),t("br"),_._v("1705")]),_._v(" "),t("td"),_._v(" "),t("td"),_._v(" "),t("td"),_._v(" "),t("td")])])])])]),_._v(" "),t("h6",{attrs:{id:"결론"}},[_._v("결론")]),_._v(" "),t("ul",[t("li",[_._v("현재 상황(서버 스펙, 2대 클러스터 구성)에서 인덱싱 성능은 4shard 4 replica가 가장 우수함.\n"),t("ul",[t("li",[_._v("인터넷 검색을 해보면 코어 하나당 샤드 하나 배치 하는 것이 좋다고 하는데, 6샤드 1레플리카(총 12개 샤드)는 성능이 4s 1r 보다 성능이 떨어짐.")])])]),_._v(" "),t("li",[_._v("사용하는 데이터의 특성 상 긴 텍스트가 없어서 그런지 text -> keyword, long -> integer로 변경한게 인덱싱 시간에 큰 영향을 주진 않는 것 같음(줄어들긴 함. 데이터 기록을 못했다 ㅠ)")]),_._v(" "),t("li",[_._v("필드의 개수를 줄이면 확실히 인덱싱 시간이 줄어든다!")])]),_._v(" "),t("h3",{attrs:{id:"_2-쿼리-속도-테스트"}},[_._v("2. 쿼리 속도 테스트")]),_._v(" "),t("h4",{attrs:{id:"쿼리-속도-테스트-1차"}},[_._v("쿼리 속도 테스트 1차")]),_._v(" "),t("h5",{attrs:{id:"준비-3"}},[_._v("준비")]),_._v(" "),t("ul",[t("li",[_._v("worst top five 해당하는 es 쿼리 작성")]),_._v(" "),t("li",[_._v("item list 해당하는 es 쿼리 작성")])]),_._v(" "),t("h5",{attrs:{id:"테스트-2"}},[_._v("테스트")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("worst top five")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("idx")]),_._v(" "),t("th",[_._v("xx")]),_._v(" "),t("th",[_._v("xx")]),_._v(" "),t("th",[_._v("xx 개수")]),_._v(" "),t("th",[_._v("xx 개수")]),_._v(" "),t("th",[_._v("date")]),_._v(" "),t("th",[_._v("db")]),_._v(" "),t("th",[_._v("elasticsearch")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("1034")]),_._v(" "),t("td",[_._v("989")]),_._v(" "),t("td",[_._v("18")]),_._v(" "),t("td",[_._v("5184")]),_._v(" "),t("td",[_._v("최근 1시간")]),_._v(" "),t("td",[_._v("2ms")]),_._v(" "),t("td",[_._v("8ms")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("전체")]),_._v(" "),t("td",[_._v("전체")]),_._v(" "),t("td",[_._v("-")]),_._v(" "),t("td",[_._v("-")]),_._v(" "),t("td",[_._v("최근 3개월 15일")]),_._v(" "),t("td",[_._v("3분이상")]),_._v(" "),t("td",[_._v("192m")])])])])]),_._v(" "),t("li",[t("p",[_._v("item list")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("idx")]),_._v(" "),t("th",[_._v("xx")]),_._v(" "),t("th",[_._v("xx")]),_._v(" "),t("th",[_._v("xx 개수")]),_._v(" "),t("th",[_._v("xx 개수")]),_._v(" "),t("th",[_._v("date")]),_._v(" "),t("th",[_._v("db")]),_._v(" "),t("th",[_._v("elasticsearch")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("1034")]),_._v(" "),t("td",[_._v("989")]),_._v(" "),t("td",[_._v("18")]),_._v(" "),t("td",[_._v("5184")]),_._v(" "),t("td",[_._v("최근 1시간")]),_._v(" "),t("td",[_._v("2ms")]),_._v(" "),t("td",[_._v("3ms")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("1034")]),_._v(" "),t("td",[_._v("989")]),_._v(" "),t("td",[_._v("692")]),_._v(" "),t("td",[_._v("163376")]),_._v(" "),t("td",[_._v("최근 4개월")]),_._v(" "),t("td",[_._v("1203ms")]),_._v(" "),t("td",[_._v("5ms")])])])])])]),_._v(" "),t("h6",{attrs:{id:"결론-2"}},[_._v("결론")]),_._v(" "),t("ul",[t("li",[_._v("RDB 대비 월등히 좋은 성능을 보임.")]),_._v(" "),t("li",[_._v("쿼리 시간도 1초 이내로 만족할 만한 시간임.")])])])}),[],!1,null,null,null);v.default=r.exports}}]);